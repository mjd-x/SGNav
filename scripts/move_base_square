#!/usr/bin/env python3

import rospy
import math
import os
import datetime
import cv2
import sqlite3

from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from geometry_msgs.msg import Pose, Point, Quaternion
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from visualization_msgs.msg import Marker


#################################################
# BASE DE DATOS
#################################################

class Database:
    """Clase que maneja la base de datos (sqlite)"""
    def __init__(self):
        # crea archivo y conecta
        try:
            self.database_path = os.path.expanduser("~") + "/robot.db"
            rospy.loginfo("Creating database... (" + self.database_path + ")")
            conn = sqlite3.connect(self.database_path)
            rospy.loginfo("Database created")

            # crea tabla
            sql = """CREATE TABLE IF NOT EXISTS obstacle (
                        id integer PRIMARY KEY NOT NULL,
                        filename text NOT NULL,
                        timestamp text NOT NULL,
                        x integer NOT NULL,
                        y integer NOT NULL,
                        z integer NOT NULL,
                        angle integer NOT NULL
                    );"""

            try:
                conn.cursor().execute(sql)
                rospy.loginfo("Table created")

                conn.commit()
                conn.close()
            except sqlite3.Error as e:
                rospy.loginfo(e)

        except sqlite3.Error as e:
            rospy.loginfo(e)

    def save_image(self, current_pose, filename, timestamp):
        """Guarda en la db el nombre de la imagen tomada y datos de la pose correspondiente"""
        # crea conexion
        try:

            conn = sqlite3.connect(self.database_path)
            print("db created")

            rospy.loginfo("Getting pose data...")
            # tomar datos para db
            p = Point()
            p = current_pose.position
            x = p.x
            y = p.y
            z = p.z

            q = Quaternion()
            q = current_pose.orientation
            euler = euler_from_quaternion(q)
            angle = euler[2] / (math.pi * 180)

            sql = """INSERT INTO obstacle(filename, timestamp, x, y, z, angle)
                        VALUES(""" + str(filename) + "," + str(timestamp) + "," + str(x) + "," + str(y) + "," + str(
                z) + "," + str(angle) + """
                    );"""
            try:
                conn.cursor().execute(sql)
                conn.commit()

                rospy.loginfo("Saved to database")
            except sqlite3.Error as e:
                print(e)

            conn.close()

        except sqlite3.Error as e:
            print.info(e)

#################################################
# CAMARA
#################################################

class Camera:
    """Manejo de la camara (generico)"""
    def __init__(self):
        camera_topic = rospy.get_param('move_base_square/camera_topic')

        # crea subscriber al topic de la camara para tomar imagen
        self.sub = rospy.Subscriber(camera_topic, Image, callback=self.get_image)
        rospy.loginfo("Subscribed to camera topic")

        # flag para saber cuando hay que sacar una foto (async)
        self.take_image = False
        # bridge para convertir tipo sensor_msgs.Image (topic) a matriz opencv
        self.bridge = CvBridge()

        rospy.loginfo("Creating images directory...")
        # crear dir donde guarda las img
        self.image_path = os.path.join(os.path.expanduser("~"), 'robot_images')

        # para guardar la pose actual
        self.current_pose = Pose()

        # conexion con la db para guardar las imagenes
        self.db = Database()

        # si ya existe, no lo crea de vuelta
        try:
            os.mkdir(self.image_path)
            rospy.loginfo("Directory created (" + self.image_path + ")")
        except FileExistsError:
            rospy.loginfo("Images directory already exists (" + self.image_path + ")")

    def set_current_pose(self, pose):
        """Guarda en current_pose la pose enviada como parametro"""
        self.current_pose = pose

    def get_image(self, message):
        """Funcion callback del subscriber, se llama cada vez que llega un mensaje al topic
           Si take_flag = True, se debe "sacar una foto", es decir guardar el siguiente mensaje en el topic
           devuelve una lista con el nombre del archivo y el timestamp para la db"""
        # si el flag es False, no hay que hacer nada
        # si es True, "saca la foto"
        if self.take_image:
            rospy.loginfo("Getting obstacle image...")

            # toma mensaje del topic (imagen de la camara)
            image = message.data
            # convierte el tipo de dato sensor_msgs.Image a uno que pueda manejar opencv
            image_cv = self.bridge.imgmsg_to_cv2(image)

            # guardar imagen como png con opencv y timestamp
            timestamp = datetime.datetime.now().strftime("%Y/%m/%d_%H-%m-%S")
            filename = self.image_path + "/image_" + timestamp + ".png"
            cv2.imwrite(filename, image_cv)
            rospy.loginfo("Saved image: " + filename)

            # guarda imagen y datos en la db
            self.db.save_image(self.current_pose, filename, timestamp)

            # vuelve a dejar el flag en False hasta que haya que guardar otra foto
            self.take_image = False


#################################################
# CLASE PRINCIPAL - COMUNICACION CON MOVE_BASE
#################################################

class MoveBaseSquare():
    """Clase base que maneja el cliente que conecta con el nodo move_base"""
    def __init__(self):
        # inicia el nodo
        rospy.init_node('move_base_square')

        # lista de pose
        self.pose_seq = list()
        # contador para ver cuantas poses ya mando, y si faltan
        self.goal_cnt = 0
        # contador de tiempo para ver que no este demasiado tiempo en un goal
        self.timeout = True

        # crea el cuadrado de pose que tiene que recorrer el robot
        self.init_poses()

        # Inicializa los markers para rviz (lista y cosas esteticas)
        rospy.loginfo("Setting up rviz markers...")
        self.init_markers()
        
        # agrega los puntos a la lista de markers        
        for pose in self.pose_seq:           
            p = Point()
            p = pose.position
            rospy.loginfo(str(p))
            self.markers.points.append(p)

        # inicializa la camara (y db)
        self.camera = Camera()

        movebase_topic = rospy.get_param('move_base_square/movebase_topic')
        # Crea action client: primer arg es el namespace de los topics (namespace/goal, namespace/feedback, etc...)
        # MoveBaseAction es el tipo de accion que intercambian a traves de los topics
        self.client = actionlib.SimpleActionClient(movebase_topic,MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")
        wait = self.client.wait_for_server()

        if not wait:
            rospy.logerr("Action server not available!")
            rospy.signal_shutdown("Action server not available!")
            return

        rospy.loginfo("Connected to move base server")
        rospy.loginfo("Starting goals achievements ...")
        self.movebase_client()
        
    def movebase_client(self):
        """EnvÃ­a el primer goal a move_base (inicia el nodo)"""
        # publica los markers al topic para rviz
        self.marker_pub.publish(self.markers)

        # Crea goal y lo manda al servidor
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = "map"
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose = self.pose_seq[self.goal_cnt]
        rospy.loginfo("Sending goal pose "+str(self.goal_cnt+1)+" to Action Server")
        rospy.loginfo(str(self.pose_seq[self.goal_cnt]))
        self.client.send_goal(goal, self.done_cb, self.active_cb)
        rospy.spin()

        # despues de 2,5 min verifica si llego al goal, si no llego ejecuta funcion timeout
        self.timeout = self.client.wait_for_result(rospy.Duration(150))
        self.timed_out()

    def init_poses(self):
        """Inicializa las poses que tiene que recorrer el robbot en una lista"""
        # toma largo del cuadrado fijado en el launch
        square_length = rospy.get_param('move_base_square/sq_length')

        # angulos de las esquinas del cuadrado
        yaweulerangles_seq = [90, 180, 270, 0]
        # lista de quaternions (orientacion) para las pose
        quat_seq = list()

        for yawangle in yaweulerangles_seq:
            # * -> unpacker, extrae valor de la lista
            # crea y agrega a la lista de quaternions los angulos
            quat_seq.append(Quaternion(*(quaternion_from_euler(0, 0, yawangle * math.pi / 180, axes='sxyz'))))

        # genera lista de puntos cada 1 metro recorriendo el cuadrado
        # cambiando la orientacion cuando llega a la esquina
        for i in range(1, square_length + 1):
            self.pose_seq.append(Pose(Point(i, 0, 0), quat_seq[0]))

        for i in range(1, square_length + 1):
            self.pose_seq.append(Pose(Point(square_length, i, 0), quat_seq[1]))

        # en los que decrece tomo el num 0, sino queda un punto duplicado y falta el del 0
        for i in reversed(range(0, square_length)):
            self.pose_seq.append(Pose(Point(i, square_length, 0), quat_seq[2]))

        for i in reversed(range(0, square_length)):
            self.pose_seq.append(Pose(Point(0, i, 0), quat_seq[3]))

    def init_markers(self):
        """Parametros para inicializar los marcadores de rviz"""
        # cargar markers para rviz
        marker_scale = 0.2
        marker_lifetime = 0  # no se van
        marker_ns = 'points'
        marker_id = 0
        marker_color = {'r': 1.0, 'g': 0.7, 'b': 1.0, 'a': 1.0}

        # define el publisher de los markers, nombre y tipo de dato que publica
        rviz_topic = rospy.get_param('move_base_square/rviz_topic')
        self.marker_pub = rospy.Publisher(rviz_topic, Marker, queue_size=100)

        # inicializa la lista de markers
        self.markers = Marker()
        self.markers.ns = marker_ns
        self.markers.id = marker_id
        # A sphere list is a list of spheres with all the same properties except their positions. Faster rendering
        # http://wiki.ros.org/rviz/DisplayTypes/Marker#Sphere_List_.28SPHERE_LIST.3D7.29
        self.markers.type = Marker.SPHERE_LIST
        self.markers.action = Marker.ADD
        self.markers.lifetime = rospy.Duration(marker_lifetime)
        self.markers.scale.x = marker_scale
        self.markers.scale.y = marker_scale
        self.markers.color.r = marker_color['r']
        self.markers.color.g = marker_color['g']
        self.markers.color.b = marker_color['b']
        self.markers.color.a = marker_color['a']

        self.markers.header.frame_id = 'map'
        self.markers.header.stamp = rospy.Time.now()
        self.markers.points = list()

    def timed_out(self):
        """Verifica si paso 2,5min desde que envio el ultimo goal
           Si timeout es False, sigue con el goal despues del tiempo y se cancela
           Si timeout es True, termino el goal"""
        if not self.timeout:
            self.client.cancel_goal() # cancela el goal actua

            # pasa la pose a la camara e indica que hay que tomar la foto y guardarla
            self.camera.set_current_pose(self.pose_seq[self.goal_cnt])
            self.camera.take_image = True

            self.goal_cnt += 1 # pasa al siguiente goal
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" timed out, trying next goal")
            self.send_next_goal()

    #############################
    # CALLBACKS
    #############################
    # SimpleActionClient tiene 3 estados:
    # activo (el servidor esta procesando el goal actual)
    # pendiente (los goals que todavia no se procesaron, estan "en cola")
    # terminado (ya se procesaron todos los goals)

    def active_cb(self):
        """callback, se llama cuando el servidor acepta el goal"""
        rospy.loginfo("Goal pose "+str(self.goal_cnt+1)+" is now being processed by the Action Server...")

    def done_cb(self, status, result):
        """callback, se llama cuando el servidor termino de procesar algun goal"""
        # si termino de procesar un goal, paso al siguiente
        self.goal_cnt += 1
        # Reference for terminal status values: http://docs.ros.org/diamondback/api/actionlib_msgs/html/msg/GoalStatus.html
        # Verifica el estado en la response
        if status == 2:
            # PREEMPTED: received a cancel request after it started executing and has since completed its execution
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" received a cancel request after it started executing, completed execution!")

        if status == 3:
            # SUCCEEDED
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" reached") 
            # Si llego al goal, pasa al siguiente
            self.send_next_goal()

        if status == 4:
            # ABORTED: aborted during execution by the action server due to some failure
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" was aborted by the Action Server")

            # pasa la pose e indica que hay que tomar la foto y guardarla
            self.camera.set_current_pose(self.pose_seq[self.goal_cnt-1])
            self.camera.take_image = True

            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" aborted, trying next goal")
            self.send_next_goal()

        if status == 5:
            # REJECTED: rejected by the action server without being processed, was unattainable or invalid
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" has been rejected by the Action Server")

            # pasa la pose a la camara e indica que hay que tomar la foto y guardarla
            self.camera.set_current_pose(self.pose_seq[self.goal_cnt-1])
            self.camera.take_image = True

            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" rejected, trying next goal")
            self.send_next_goal()

        if status == 8:
            # RECALLED: goal received a cancel request before it started executing and was successfully cancelled
            rospy.loginfo("Goal pose "+str(self.goal_cnt)+" received a cancel request before it started executing, successfully cancelled!")

    def send_next_goal(self):
        """Envia el siguiente goal al cliente o termina la ejecucion si no quedan mas goals"""
        # Verifica si ya proceso todos los goals, si faltan pasa al siguiente, sino termina
        if self.goal_cnt < len(self.pose_seq):
            self.marker_pub.publish(self.markers)
            next_goal = MoveBaseGoal()
            next_goal.target_pose.header.frame_id = "map"
            next_goal.target_pose.header.stamp = rospy.Time.now()
            next_goal.target_pose.pose = self.pose_seq[self.goal_cnt]
            rospy.loginfo("Sending goal pose "+str(self.goal_cnt+1)+" to Action Server")
            rospy.loginfo(str(self.pose_seq[self.goal_cnt]))
            self.client.send_goal(next_goal, self.done_cb, self.active_cb)
        else:
            rospy.loginfo("Final goal pose reached!")
            rospy.signal_shutdown("Final goal pose reached!")
            return

if __name__ == '__main__':
    try:
        MoveBaseSquare()
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation finished.")